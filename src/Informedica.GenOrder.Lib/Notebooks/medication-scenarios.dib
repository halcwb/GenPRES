#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":".NET"},{"name":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"},{"name":"vscode","aliases":["frontend"]}]}}

#!markdown

# Basic Medication Scenarios with the `Informedica.GenOrder.Lib` library

#!markdown

First load all the required references and source files

#!fsharp

#load "load.fsx"

open System
open MathNet.Numerics

open Informedica.GenUnits.Lib
open Informedica.GenOrder.Lib

#!markdown

## 1. En empty Medication Scenario

Start with an empty Medication Scenario defined by `MedciationOrder.order`. This can be transformed to an Order.Dto and then turned into a regular `Order`.

#!fsharp

MedicationOrder.order

#!markdown

Now define a drug order. In this example a paracetamol suppository with the following constraints:

- There are supps with concentrations of 60, 120, 240 500 and 1000 mg per piece
- You can give the supp 2 to 4 times a day
- The max dose quantity is 1000 mg per time
- The max dose total is 4 gram per day
- The min adjusted dose total is 40 mg/kg/day and
- The max adjusted dose total is 90 mg/kg/day

**Note** The code will create an Order DTO that can be used with the constraint solver to calculate valid dosing scenarios.

#!fsharp

// Paracetamol supp example
// First define the drug order
{
    MedicationOrder.order with
        Id = "1"
        Name = "paracetamol"
        Components = 
            [
                { 
                    MedicationOrder.productComponent with 
                        Name = "paracetamol"
                        Shape = "supp"
                        Quantities = 
                            1N
                            |> ValueUnit.singleWithUnit Units.Count.times
                            |> Some
                        Substances =
                            [
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "paracetamol"
                                        Concentrations = 
                                            [| 60N; 120N; 240N; 500N; 1000N |]
                                            |> ValueUnit.withUnit Units.Mass.milliGram
                                            |> Some
                                }
                            ]
                }
            ]
        Route = "rect"
        OrderType = DiscontinuousOrder
}
|> MedicationOrder.toOrderDto
|> fun dto -> 
    printfn "%A" dto
    dto

#!markdown

Another paracetamol example. However now we have a paracetamol solution. This means that there are more flexible dosing options as a solution can be measured in milliliters instead of being constrained by discrete suppository units.

#!fsharp

// Paracetamol drink
{
    MedicationOrder.order with
        Id = "1"
        Name = "paracetamol"
        Components = 
            [
                { 
                    MedicationOrder.productComponent with 
                        Name = "paracetamol"
                        Shape = "drink"
                        Quantities = 
                            100N
                            |> ValueUnit.singleWithUnit Units.Volume.milliLiter
                            |> Some
                        Substances =
                            [
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "paracetamol"
                                        Concentrations = 
                                            [| 24N |]
                                            |> ValueUnit.withUnit (Units.Mass.milliGram |> Units.per Units.Volume.milliLiter)
                                            |> Some
                                }
                            ]
                }
            ]
        Route = "or"
        OrderType = DiscontinuousOrder
        Frequencies = 
            [| 2N |]
            |> ValueUnit.withUnit (Units.Count.times |> Units.per Units.Time.day)
            |> Some
}
|> MedicationOrder.toOrderDto
|> fun dto -> 
    printfn "%A" dto
    dto

#!markdown

Now do this for a more complicated example in which a ``Component``, i.e. a product contains 2 ``Items``, i.e. substances. In this case *cotrimoxazol*, a drug with:

- sulfamethoxazol 100, 400 or 800 mg per tablet and
- trimethoprim 20, 80 or 160 mg per tablet

#!fsharp

// Drug with multiple items
// cotrimoxazol for infection
{
    MedicationOrder.order with
        Id = "1"
        Name = "cotrimoxazol"
        Components = 
            [
                { 
                    MedicationOrder.productComponent with 
                        Name = "cotrimoxazol"
                        Shape = "tablet"
                        Quantities = 
                            1N
                            |> ValueUnit.singleWithUnit Units.Count.times
                            |> Some
                        Divisible = Some (1N)
                        Substances =
                            [
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "sulfamethoxazol"
                                        Concentrations = 
                                            [| 100N; 400N; 800N |]
                                            |> ValueUnit.withUnit Units.Mass.milliGram
                                            |> Some
                                }
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "trimethoprim"
                                        Concentrations = 
                                            [| 20N; 80N; 160N |]
                                            |> ValueUnit.withUnit Units.Mass.milliGram
                                            |> Some
                                }
                            ]
                }
            ]
        Route = "or"
        OrderType = DiscontinuousOrder
        Frequencies = 
            [|2N |]
            |> ValueUnit.withUnit (Units.Count.times |> Units.per Units.Time.day)
            |> Some
}
|> MedicationOrder.toOrderDto
|> fun dto -> 
    printfn "%A" dto
    dto

#!markdown

The same *cotrimoxazol* example, but now contained in a drinkable solution.

#!fsharp

// Drug with multiple items
// cotrimoxazol drink for infection
{
    MedicationOrder.order with
        Id = "1"
        Name = "cotrimoxazol"
        Components = 
            [
                { 
                    MedicationOrder.productComponent with 
                        Name = "cotrimoxazol"
                        Shape = "drink"
                        Quantities = 
                            1N
                            |> ValueUnit.singleWithUnit Units.Volume.milliLiter
                            |> Some
                        Substances =
                            [
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "sulfamethoxazol"
                                        Concentrations = 
                                            [| 40N |]
                                            |> ValueUnit.withUnit (Units.Mass.milliGram |> Units.per Units.Volume.milliLiter)
                                            |> Some
                                }
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "trimethoprim"
                                        Concentrations = 
                                            [| 8N |]
                                            |> ValueUnit.withUnit (Units.Mass.milliGram |> Units.per Units.Volume.milliLiter)
                                            |> Some
                                }
                            ]
                }
            ]
        Route = "or"
        OrderType = DiscontinuousOrder
        Frequencies = 
            [| 2N |]
            |> ValueUnit.withUnit (Units.Count.times |> Units.per Units.Time.day)
            |> Some
}
|> MedicationOrder.toOrderDto
|> fun dto -> 
    printfn "%A" dto
    dto

#!markdown

But a ``Component`` cannot only have multiple ``Items``, multiple ``Components`` can be added to an ``Orderable``. For example:

- A dopamin pump infusion using a syringe of 50 ml, i.e. the ``Orderable``.
- Contains a product dopamin, with the substance dopamin, i.e. a ``Component`` with one ``Item``.
- And also contains a product normal saline which contains 2 electrolytes, sodium and chloride. So, another ``Component``, this one with 2 ``Items``.

#!fsharp

// Dopamin infusion calculate scenario's 
// with a number of standard solutions
{
    MedicationOrder.order with
        Id = "1"
        Name = "dopamin infusion"
        Quantities = 
            50N
            |> ValueUnit.singleWithUnit Units.Volume.milliLiter
            |> Some
        Components = 
            [
                { 
                    MedicationOrder.productComponent with
                        Name = "dopamin"
                        Shape = "infusion fluid"
                        Quantities = 
                            5N
                            |> ValueUnit.singleWithUnit Units.Volume.milliLiter
                            |> Some
                        Divisible = Some (1N/10N)
                        Substances = 
                            [
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "dopamin"
                                        Concentrations = 
                                            [| 40N |]
                                            |> ValueUnit.withUnit (Units.Mass.milliGram |> Units.per Units.Volume.milliLiter)
                                            |> Some
                                }
                            ]
                }
                { 
                    MedicationOrder.productComponent with
                        Name = "saline"
                        Shape = "infusion fluid"
                        Quantities = 
                            5000N
                            |> ValueUnit.singleWithUnit Units.Volume.milliLiter
                            |> Some
                        Divisible = Some (1N/10N)
                        Substances = 
                            [
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "sodium"
                                        Concentrations = 
                                            [| 155N / 1000N |]
                                            |> ValueUnit.withUnit (Units.Molar.milliMole |> Units.per Units.Volume.milliLiter)
                                            |> Some
                                }
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "chloride"
                                        Concentrations = 
                                            [| 155N / 1000N |]
                                            |> ValueUnit.withUnit (Units.Molar.milliMole |> Units.per Units.Volume.milliLiter)
                                            |> Some
                                }
                            ]
                }
            ]
        Route = "iv"
        OrderType = ContinuousOrder
}
|> MedicationOrder.toOrderDto
|> fun dto -> 
    printfn "%A" dto
    dto

#!markdown

A different way to calculate the same dopamine pump infusion order.

#!fsharp

// Dopamin infusion calculate scenario's 
// with a fixed infusion - dose rate
{
    MedicationOrder.order with
        Id = "1"
        Name = "dopamin infusion"
        Quantities = 
            50N
            |> ValueUnit.singleWithUnit Units.Volume.milliLiter
            |> Some
        Components = 
            [
                { 
                    MedicationOrder.productComponent with
                        Name = "dopamin"
                        Shape = "infusion fluid"
                        Quantities = 
                            5N
                            |> ValueUnit.singleWithUnit Units.Volume.milliLiter
                            |> Some
                        Divisible = Some 1N
                        Substances = 
                            [
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "dopamin"
                                        Concentrations = 
                                            [| 40N |]
                                            |> ValueUnit.withUnit (Units.Mass.milliGram |> Units.per Units.Volume.milliLiter)
                                            |> Some
                                }
                            ]
                }
                { 
                    MedicationOrder.productComponent with
                        Name = "saline"
                        Shape = "infusion fluid"
                        Quantities = 
                            5000N
                            |> ValueUnit.singleWithUnit Units.Volume.milliLiter
                            |> Some
                        Divisible = Some 1N
                        Substances = 
                            [
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "sodium"
                                        Concentrations = 
                                            [| 155N / 1000N |]
                                            |> ValueUnit.withUnit (Units.Molar.milliMole |> Units.per Units.Volume.milliLiter)
                                            |> Some
                                }
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "chloride"
                                        Concentrations = 
                                            [| 155N / 1000N |]
                                            |> ValueUnit.withUnit (Units.Molar.milliMole |> Units.per Units.Volume.milliLiter)
                                            |> Some
                                }
                            ]
                }
            ]
        Route = "iv"
        OrderType = ContinuousOrder
}
|> MedicationOrder.toOrderDto
|> fun dto -> 
    printfn "%A" dto
    dto

#!markdown

An even more complicated example is the calculation of gentamicin, an antibiotic, which is contained in a solution (so 2 ``Components`` are involved), and is infused over a certain amount of time.

#!fsharp

// gentamicin
{
    MedicationOrder.order with
        Id = "1"
        Name = "gentamicin"
        Components = 
            [
                { 
                    MedicationOrder.productComponent with
                        Name = "gentamicin"
                        Shape = "infusion fluid"
                        Quantities = 
                            [| 2N; 10N |]
                            |> ValueUnit.withUnit Units.Volume.milliLiter
                            |> Some
                        Divisible = Some 1N 
                        Substances = 
                            [
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "gentamicin"
                                        Concentrations = 
                                            [| 10N; 40N |]
                                            |> ValueUnit.withUnit (Units.Mass.milliGram |> Units.per Units.Volume.milliLiter)
                                            |> Some
                                }
                            ]
                }
                { 
                    MedicationOrder.productComponent with
                        Name = "saline"
                        Shape = "infusion fluid"
                        Quantities = 
                            5000N
                            |> ValueUnit.singleWithUnit Units.Volume.milliLiter
                            |> Some
                        Divisible = Some 1N 
                        Substances = 
                            [
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "sodium"
                                        Concentrations = 
                                            [| 155N / 1000N |]
                                            |> ValueUnit.withUnit (Units.Molar.milliMole |> Units.per Units.Volume.milliLiter)
                                            |> Some
                                }
                                {
                                    MedicationOrder.substanceItem with
                                        Name = "chloride"
                                        Concentrations = 
                                            [| 155N / 1000N |]
                                            |> ValueUnit.withUnit (Units.Molar.milliMole |> Units.per Units.Volume.milliLiter)
                                            |> Some
                                }
                            ]
                }
            ]
        Route = "iv"
        OrderType = TimedOrder
        Frequencies = 
            [| 1N |]
            |> ValueUnit.withUnit (Units.Count.times |> Units.per Units.Time.day)
            |> Some
    }
|> MedicationOrder.toOrderDto
|> fun dto -> 
    printfn "%A" dto
    dto
